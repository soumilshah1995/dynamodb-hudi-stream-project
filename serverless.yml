service: dynamodb-hudi-project
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.7
  memorySize: 512
  timeout: 600
  architecture: x86_64
  stackTags:
    product: datateam
    env: qa
    created-date: 2022-04-26
    team: python-dev
    customer-impact: false
    terraform: false

useDotenv: true

plugins:
  - serverless-glue


Glue:
  bucketDeploy: ${env:GLUE_BUCKET_DEPLOY}
  tempDirBucket: ${env:GLUE_BUCKET_DEPLOY}
  tempDirS3Prefix: 'temp/'
  jobs:
    - name: ${env:GLUE_JOB_NAME}
      scriptPath: ${env:GLUE_SCRIPT_NAME}
      type: spark
      glueVersion: "python3-3.0"
      role: ${env:ROLE}
      MaxConcurrentRuns: 3
      Connections:
        - ${env:GLUE_HUDI_CONNECTOR_NAME}
      DefaultArguments:
        customArguments:
          class : 'GlueApp'
          database_name: ${env:GLUE_DB_NAME}
          hudi_table_name: ${env:HUDI_TABLE_NAME}
          kinesis_table_name : ${env:GLUE_KINESIS_TABLE}
          s3_path_hudi : ${env:HUDI_DATALAKE_PATH}
          s3_path_spark : ${env:GLUE_STREAM_CHECK_POINT}
          starting_position_of_kinesis_iterator: 'LATEST'
          window_size : ${env:KINESIS_PROCESS_WINDOW}
      tempDir: true
      WorkerType: Standard
      NumberOfWorkers: 3
      Timeout: 2880
      MaxRetries: 0
      SupportFiles:
        - local_path: ${env:GLUE_SCRIPT_NAME}
          s3_bucket: ${env:GLUE_SCRIPT_BUCKET}
          s3_prefix: 'Scripts/'
          execute_upload: True


functions:
  lambda:
    handler: lambda_function.lambda_handler
    environment:
      DEV_AWS_ACCESS_KEY: ${env:DEV_AWS_ACCESS_KEY}
      DEV_AWS_SECRET_KEY: ${env:DEV_AWS_SECRET_KEY}
      DEV_AWS_REGION_NAME: ${env:DEV_AWS_REGION_NAME}
      STREAM_NAME: ${env:StreamNameHUDI}
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - KinesisDataStreamsDynamoDB
              - Arn


resources:
  Resources:

    KinesisDataStreamsDynamoDB:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${env:StreamNameDynamoDB}
        RetentionPeriodHours: ${env:RetentionPeriodHoursDynamoDB}
        StreamModeDetails:
          StreamMode: ON_DEMAND

    KinesisDataStreamsHUDI:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${env:StreamNameHUDI}
        RetentionPeriodHours: ${env:RetentionPeriodHoursHUDI}
        StreamModeDetails:
          StreamMode: ON_DEMAND

    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMO_DB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableClass: STANDARD
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        KinesisStreamSpecification:
          StreamArn: !GetAtt KinesisDataStreamsDynamoDB.Arn

    GlueDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: ${env:ACCOUNT}
        DatabaseInput:
          Name: ${env:GLUE_DB_NAME}

